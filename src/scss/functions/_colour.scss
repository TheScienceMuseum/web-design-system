////
/// @group Colours
////

// Photoshop blend modes from https://github.com/heygrady/scss-blend-modes
// this is useful reference too: http://jackiebalzer.com/color

//-----------------------------------------------------------------------------
// Normal
//-----------------------------------------------------------------------------

/// Returns a color simulating Photoshop blend mode - Normal
/// @param {Color} $foreground - topmost colour. (likely to contain opacity)
/// @param {Color} $background - bottom colour.
/// @return {Color}

@function blend-normal($foreground, $background) {
  $opacity: opacity($foreground);
  $background-opacity: opacity($background);

  // calculate opacity
  $bm-red: red($foreground) * $opacity + red($background) * $background-opacity *
    (1 - $opacity);
  $bm-green: green($foreground) * $opacity + green($background) *
    $background-opacity * (1 - $opacity);
  $bm-blue: blue($foreground) * $opacity + blue($background) *
    $background-opacity * (1 - $opacity);
  @return rgb($bm-red, $bm-green, $bm-blue);
}

//--------------------------------
// Multiply
//--------------------------------

/// Returns a color simulating Photoshop blend mode -  Multiply
/// @param {Color} $foreground - top colour.
/// @param {Color} $background - bottom colour.
/// @return {Color}

@function blend-multiply($foreground, $background) {
  $bm-red: red($background) * red($foreground) / 255;
  $bm-green: green($background) * green($foreground) / 255;
  $bm-blue: blue($background) * blue($foreground) / 255;

  @return blend-normal(
    rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)),
    $background
  );
}

/// Returns a grey color from 0-white to 100-black
/// @param {Number} $tint - number between 0-100
/// @return {Color}

@function grey($tint) {
  @return rgb(255 - $tint * 2.55, 255 - $tint * 2.55, 255 - $tint * 2.55);
}

/// lighten a color
/// @param {Color} $color - color to tint
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}

@function tint($color, $percentage) {
  @return mix($color, white, $percentage);
}

/// Get a colour from the $palette map
/// @param {Color} $palette - base color
/// @param {String} $tone - color variation to return, default: base
/// @return {Color}

@function palette($palette, $tone: "base") {
  @return map-get(map-get($palettes, $palette), $tone);
}

/// create a Background gradient from the SMG palette
/// @param {List} $stops - List of colors

@mixin sm-gradient($stops) {
  @each $stop in $stops {
    @if type-of($stop) != color {
      @warn '`#{$stop}` is not a color. I wish it was.';
    }
  }

  @if length($stops) == 1 {
    background-color: $stops;
  }
  @if length($stops) == 2 {
    background-image: linear-gradient(
      135deg,
      nth($stops, 1) 0%,
      nth($stops, 2) 100%
    );
  }
  @if length($stops) > 2 {
    background-image: radial-gradient(
        ellipse at bottom left,
        nth($stops, 1),
        rgba(nth($stops, 1), 0) 50%
      ),
      linear-gradient(to right, nth($stops, 2) 0%, nth($stops, 3) 100%);
  }
}

/// Animates background gradients
/// @access public
/// @param {String} $duration - time + s
/// @param {Number} $layers - if multiple properties, number of

@mixin sm-gradient-animated($duration: 5s, $layers: 1) {
  $name: sm-grad-fade-#{$duration}-#{$layers}; // if these variables change, we'd need to ouput a different name at root.
  animation-name: $name;
  animation-duration: $duration;
  animation-timing-function: ease-in-out;
  animation-direction: alternate;
  animation-iteration-count: infinite;

  @at-root {
    @keyframes #{$name} {
      0% {
        background-size: repeat(100% 100%, $layers);
      }
      100% {
        background-size: repeat(200% 200%, $layers);
      }
    }
  }
}

/// repeats a value. For properties that take comma-separated lists
/// @access public
/// @param {String} $value - initial value to repeat
/// @param {Number} $repetitions - number of repetitions
/// @return {String}

@function repeat($value, $repetitions) {
  $values: ();
  @for $i from 1 through $repetitions {
    $next_value: $value;
    $values: append($values, $next_value, comma);
  }
  @return $values;
}

// brightness or luminance finction from compass, but not quite accurate.
@function brightness($color) {
  @if type-of($color) == color {
    @return (red($color) * 0.299 + green($color) * 0.587 + blue($color) * 0.114) /
      255 * 100%;
  } @else {
    @return unquote("brightness(#{$color})");
  }
}

// https://gist.github.com/jlong/f06f5843104ee10006fe
$red-magic-number: 241;
$green-magic-number: 691;
$blue-magic-number: 68;
$brightness-divisor: $red-magic-number + $green-magic-number +
  $blue-magic-number;

@function perceivedbrightness($color) {
  // Extract color components
  $red-component: red($color);
  $green-component: green($color);
  $blue-component: blue($color);

  // Calculate a brightness value in 3d color space between 0 and 255
  $number: sqrt(
    (
        ($red-component * $red-component * $red-magic-number) +
          ($green-component * $green-component * $green-magic-number) +
          ($blue-component * $blue-component * $blue-magic-number)
      ) / $brightness-divisor
  );

  // Convert to percentage and return
  @return 100% * $number / 255;
}

@function contrasting-text-color($color, $light: white, $dark: black) {
  @if (perceivedbrightness($color) > 68) {
    @return $dark; // Lighter background, return dark color
  } @else {
    @return $light; // Darker background, return light color
  }
}
