// Utility classes
// single-responsibility classes,
// Do not bind to.

.u-skip-link,
.u-visually-hidden,
.visually-hidden,
.screen-reader-text {
  @include for-screen-readers;
}

.u-skip-link:focus {
  visibility: visible;
  clip: auto;
  width: auto;
  height: auto;
  padding: 0.5rem;
  background: white;
}

// relative sizing (to text) for svg icons
.u-icon {
  display: inline-block;
  width: 1em;
  height: 1em;
  vertical-align: baseline; // though YMMV
  svg {
    width: 100%;
    height: 100%;
  }
}

// Generates a bunch of classes to apply gradients to things.
// gradients can be 2 or 3 colours, but must be sequential on the colour wheel.
$colournames: "red" "orange" "yellow" "green" "teal" "blue" "purple" "red"
  "orange";
$colourvars: $c-red $c-orange $c-yellow $c-green $c-teal $c-blue $c-purple
  $c-red $c-orange;

html {
  // slight selector bump, to override later classes that may also specify a default background-image
  @for $i from 1 through length($colournames) - 1 {
    .u-grad-#{nth($colournames, $i)}-#{nth($colournames, $i+1)} {
      @include sm-gradient(nth($colourvars, $i) nth($colourvars, $i + 1));
    }

    .u-grad-#{nth($colournames, $i+1)}-#{nth($colournames, $i)} {
      @include sm-gradient(nth($colourvars, $i + 1) nth($colourvars, $i));
    }
  }
  @for $i from 1 through length($colournames) - 2 {
    .u-grad-#{nth($colournames, $i)}-#{nth($colournames, $i+1)}-#{nth($colournames, $i+2)} {
      @include sm-gradient(
        nth($colourvars, $i) nth($colourvars, $i + 1) nth($colourvars, $i + 2)
      );
      color: choose-contrast-color(nth($colourvars, $i + 1));
    }

    .u-grad-#{nth($colournames, $i+2)}-#{nth($colournames, $i+1)}-#{nth($colournames, $i)} {
      @include sm-gradient(
        nth($colourvars, $i + 2) nth($colourvars, $i + 1) nth($colourvars, $i)
      );
      color: choose-contrast-color(nth($colourvars, $i + 1));
    }
  }
  .u-grad-clear {
    background-image: none; //just for testing templates
  }

  // classes for all defined pallette colours:
  @each $theme, $props in $palettes {
    .u-bg-#{$theme} {
      color: map-get($props, text);
      background-color: map-get($props, base);
    }
    .u-bg-#{$theme}-light {
      color: map-get($props, text);
      background-color: map-get($props, light);
    }
    .u-bg-#{$theme}-dark {
      color: map-get($props, text);
      background-color: map-get($props, dark);
    }
  }
}

.u-show-for-small-only {
  @include media(">=small") {
    display: none !important;
  }
}
.u-hide-for-small-only {
  @include media("<small") {
    display: none !important;
  }
}

.u-responsive-embed {
  @include responsive-embed(16 by 9);
  // override to other ratios by setting padding-bottom % inline?
}
